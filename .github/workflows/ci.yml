name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"

jobs:
  # Code Quality & Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run format.fix

      - name: Security audit
        run: npm audit --audit-level high
        continue-on-error: true

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: vo2max_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/vo2max_test
      JWT_SECRET: test-jwt-secret-key-for-ci-testing
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Seed test database
        run: npm run db:seed

      - name: Run tests
        run: npm test

      - name: Test database connection
        run: npm run db:test

  # Build Verification
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            !dist/**/*.map
          retention-days: 7

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: vo2max-app:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name vo2max-test \
            -e NODE_ENV=production \
            -e PORT=3000 \
            -e JWT_SECRET=test-secret \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            vo2max-app:ci-test

          # Wait a bit for startup
          sleep 10

          # Check if container is running
          docker ps | grep vo2max-test || exit 1

          # Cleanup
          docker stop vo2max-test

  # Notify Results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, docker-build]
    if: always()

    steps:
      - name: Check overall status
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            echo "CI_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Some CI checks failed!"
            echo "CI_STATUS=failure" >> $GITHUB_ENV
            exit 1
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = process.env.CI_STATUS;
            const emoji = status === 'success' ? '✅' : '❌';
            const message = status === 'success' 
              ? 'All CI checks passed! Ready for review.' 
              : 'Some CI checks failed. Please review the workflow logs.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **CI Pipeline Results**\n\n${message}`
            });
