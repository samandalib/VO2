name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/vo2max-app

jobs:
  # Run CI checks first
  ci-checks:
    name: CI Checks
    uses: ./.github/workflows/ci.yml

  # Build and push Docker image
  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: ci-checks
    if: success() || github.event.inputs.force_deploy == 'true'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=staging

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"

          # This is a placeholder for actual deployment
          # Replace with your deployment method:
          # - SSH to staging server
          # - Update Kubernetes manifests
          # - Use cloud provider CLI
          # - Deploy to Railway/Render/etc.

          echo "üìù Example staging deployment commands:"
          echo "docker-compose -f docker-compose.staging.yml pull"
          echo "docker-compose -f docker-compose.staging.yml up -d"

      # Example: Deploy using SSH (uncomment and customize)
      # - name: Deploy via SSH
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.STAGING_HOST }}
      #     username: ${{ secrets.STAGING_USER }}
      #     key: ${{ secrets.STAGING_SSH_KEY }}
      #     script: |
      #       cd /app/vo2max
      #       git pull origin develop
      #       docker-compose -f docker-compose.staging.yml pull
      #       docker-compose -f docker-compose.staging.yml up -d

      # Example: Deploy to Railway (uncomment and customize)
      # - name: Deploy to Railway
      #   uses: railway-app/railway-cli@v1
      #   with:
      #     railway-token: ${{ secrets.RAILWAY_TOKEN }}
      #     railway-project: ${{ secrets.RAILWAY_PROJECT_ID }}
      #     command: |
      #       railway environment staging
      #       railway up --detach

  # Run database migrations on staging
  migrate-staging:
    name: Migrate Staging Database
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          npx prisma generate
          npx prisma migrate deploy

  # Health check staging deployment
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: migrate-staging

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check staging health
        run: |
          # Replace with your actual staging URL
          STAGING_URL="${{ secrets.STAGING_URL || 'https://your-staging-app.com' }}"

          echo "üîç Checking health of: $STAGING_URL"

          # Try to reach the health endpoint
          if curl -f "$STAGING_URL/health" --max-time 10; then
            echo "‚úÖ Staging deployment healthy!"
          else
            echo "‚ùå Staging deployment health check failed!"
            exit 1
          fi

  # Run integration tests against staging
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: health-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        env:
          STAGING_URL: ${{ secrets.STAGING_URL || 'https://your-staging-app.com' }}
        run: |
          echo "üß™ Running integration tests against staging..."
          # Add your integration test commands here
          # npm run test:integration
          echo "‚úÖ Integration tests passed!"

  # Notify deployment status
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, migrate-staging, health-check, integration-tests]
    if: always()

    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" && 
                "${{ needs.migrate-staging.result }}" == "success" && 
                "${{ needs.health-check.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "‚úÖ Staging deployment successful!"
            echo "üåê Staging URL: ${{ secrets.STAGING_URL || 'Configure STAGING_URL secret' }}"
            echo "üìä Image: ${{ needs.build-and-push.outputs.image-tag }}"
          else
            echo "‚ùå Staging deployment failed!"
            echo "Please check the workflow logs for details."
            exit 1
          fi

      # Optional: Slack/Discord notification
      # - name: Slack Notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: "Staging deployment ${{ job.status }}!"
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
